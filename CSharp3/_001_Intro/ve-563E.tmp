using System;
using System.Collections.Generic;
using System.IO;
using NUnit.Framework;
using System.Linq;
using Void.Linq;
using Void.Hierarchies;

namespace CSharp3._001_Intro
{
    /// <summary>
    /// There is an elephant in the room. A large problem with the way 
    /// that we write software. 
    /// 
    /// We are breaking the DRY principle of SOLID badly with 
    /// most every function we write. 
    /// 
    /// The elephant is the constant reimplementation 
    /// of generic algorithms. We do it again and again, numb
    /// from years of doing it because we had no no good alternative. NOW WE DO!
    /// 
    /// </summary>
    [TestFixture]
    public class TheElephantInTheRoom
    {
        /// <summary>
        /// This is about how I usually see code like this
        /// </summary>
        static long SizeOfFolderClassic(string folder)
        {
            long result = 0;
            string[] subFolders = Directory.GetDirectories(folder);
            foreach (var subFolder in subFolders)
            {
                result += SizeOfFolderClassic(subFolder);
            }
            
            string[] files = Directory.GetFiles(folder);
            foreach (var file in files)
            {
                result += new FileInfo(file).Length;
            }

            return result;
        }

        #region And what's wrong with that?

        // Fetching data, recursive descent tree walking, 
        // transforming data, and data aggregation 
        // is all baked into one big mess. Do you think that 
        // it is easy to read the first time you see it?
        //
        // Code should do one thing at a time in clear and easy to read steps.        
        //        
        // Wheels reinvented above: 
        //  Recursive descent tree walking
        //  Transforming data
        //  Aggregateing data



        #endregion

        static long SizeOfFolderSane(string folder)
        {
            return folder.FlattenHierarchy(Directory.GetDirectories)
             .SelectMany(dir => Directory.GetFiles(dir))
             .Sum(file => new FileInfo(file).Length);
        }

        [Test]
        public void SumSquaresTheOldWay()
        {


        }   
    }
}